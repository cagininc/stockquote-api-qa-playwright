# soap-api-playwright

**Automated Playwright tests for a SOAP-based StockQuote API, including functional and performance checks.**

---

## ðŸš€ Project Overview

I built a **Node.js** server that exposes a SOAP endpoint for real-time stock quotes by proxying Alpha Vantageâ€™s REST API.  
Using the **Serverless Framework**, I deployed this service on **AWS Lambda**, and set up **CloudWatch** dashboards to monitor invocation counts, error rates and response times.  
This test suite validates that the live Lambda endpoint:

- **Functional Validation** of XML requests/responses  
- **Performance Awareness** via response-time assertions  
- **Modular Design** (helpers, data-driven tests)  
- **Professional Reporting** with Allure  

---
## Reports

## Allure Report

![Allure Report](https://raw.githubusercontent.com/cagininc/stockquote-api-qa-playwright/main/reports/Allure.png)
![Allure Report](reports/Allure.png)

## CloudWatch Dashboard

![CloudWatch](https://raw.githubusercontent.com/cagininc/stockquote-api-qa-playwright/main/reports/CloudWatch.png)
![Allure Report](reports/CloudWatch.png)

## ðŸ“¦ Repository Structure

soap-api-playwright/
â”œâ”€â”€ data/ # Test data (symbols.json)
â”œâ”€â”€ helpers/ # Helper functions (buildRequest.ts)
â”œâ”€â”€ fixtures/ # Shared fixtures (apiContext.ts)
â”œâ”€â”€ tests/
â”‚ â””â”€â”€ specs/ # Playwright spec files
â”‚ â”œâ”€â”€ stockQuote.spec.ts
â”‚ â””â”€â”€ responseTime.spec.ts
â”œâ”€â”€ .env # Environment variables (ignored)
â”œâ”€â”€ playwright.config.ts # Playwright configuration
â”œâ”€â”€ package.json
â””â”€â”€ .gitignore

